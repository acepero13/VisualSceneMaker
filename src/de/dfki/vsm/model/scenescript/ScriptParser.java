
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Wed Jun 01 08:45:43 CEST 2016
//----------------------------------------------------

package de.dfki.vsm.model.scenescript;

import java.io.*;
import java.util.*;
import java_cup.runtime.*;
import de.dfki.vsm.util.log.*;
import de.dfki.vsm.util.syn.*;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Wed Jun 01 08:45:43 CEST 2016
  */
public class ScriptParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public ScriptParser() {super();}

  /** Constructor which sets the default scanner. */
  public ScriptParser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public ScriptParser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\041\000\002\002\004\000\002\017\003\000\002\007" +
    "\002\000\002\007\003\000\002\004\004\000\002\004\003" +
    "\000\002\014\003\000\002\014\003\000\002\013\010\000" +
    "\002\002\004\000\002\002\003\000\002\011\005\000\002" +
    "\006\004\000\002\006\003\000\002\015\004\000\002\003" +
    "\004\000\002\003\003\000\002\012\003\000\002\012\005" +
    "\000\002\012\004\000\002\012\006\000\002\012\007\000" +
    "\002\012\010\000\002\010\003\000\002\010\002\000\002" +
    "\005\004\000\002\005\003\000\002\016\006\000\002\016" +
    "\005\000\002\016\005\000\002\016\005\000\002\016\005" +
    "\000\002\016\005" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\010\002\uffff\022\007\027\010\001\002\000" +
    "\010\002\ufffc\022\ufffc\027\ufffc\001\002\000\004\002\067" +
    "\001\002\000\004\002\000\001\002\000\010\002\ufffa\022" +
    "\ufffa\027\ufffa\001\002\000\004\020\014\001\002\000\010" +
    "\002\ufffb\022\ufffb\027\ufffb\001\002\000\010\002\ufffe\022" +
    "\007\027\010\001\002\000\010\002\ufffd\022\ufffd\027\ufffd" +
    "\001\002\000\004\021\015\001\002\000\004\023\016\001" +
    "\002\000\004\017\017\001\002\000\004\023\022\001\002" +
    "\000\012\002\ufff9\022\ufff9\023\022\027\ufff9\001\002\000" +
    "\012\002\ufff7\022\ufff7\023\ufff7\027\ufff7\001\002\000\004" +
    "\017\023\001\002\000\010\004\027\010\032\012\026\001" +
    "\002\000\020\002\ufff4\004\ufff4\010\ufff4\012\ufff4\022\ufff4" +
    "\023\ufff4\027\ufff4\001\002\000\012\004\027\007\064\010" +
    "\032\012\026\001\002\000\004\006\063\001\002\000\014" +
    "\004\ufff0\005\061\007\ufff0\010\ufff0\012\ufff0\001\002\000" +
    "\020\002\ufff6\004\027\010\032\012\026\022\ufff6\023\ufff6" +
    "\027\ufff6\001\002\000\012\004\ufff1\007\ufff1\010\ufff1\012" +
    "\ufff1\001\002\000\004\023\033\001\002\000\006\011\uffe9" +
    "\023\037\001\002\000\006\011\uffea\023\044\001\002\000" +
    "\006\011\uffe7\023\uffe7\001\002\000\004\011\056\001\002" +
    "\000\010\011\uffe9\023\042\026\040\001\002\000\016\012" +
    "\051\013\054\014\047\015\053\016\050\023\052\001\002" +
    "\000\004\011\046\001\002\000\010\011\uffe9\023\044\026" +
    "\040\001\002\000\004\011\045\001\002\000\004\026\040" +
    "\001\002\000\012\004\uffeb\007\uffeb\010\uffeb\012\uffeb\001" +
    "\002\000\012\004\uffec\007\uffec\010\uffec\012\uffec\001\002" +
    "\000\006\011\uffe4\023\uffe4\001\002\000\006\011\uffe2\023" +
    "\uffe2\001\002\000\004\006\055\001\002\000\006\011\uffe1" +
    "\023\uffe1\001\002\000\006\011\uffe3\023\uffe3\001\002\000" +
    "\006\011\uffe5\023\uffe5\001\002\000\006\011\uffe6\023\uffe6" +
    "\001\002\000\012\004\uffed\007\uffed\010\uffed\012\uffed\001" +
    "\002\000\006\011\uffe8\023\uffe8\001\002\000\020\002\ufff5" +
    "\004\ufff5\010\ufff5\012\ufff5\022\ufff5\023\ufff5\027\ufff5\001" +
    "\002\000\004\004\062\001\002\000\012\004\uffef\007\uffef" +
    "\010\uffef\012\uffef\001\002\000\012\004\uffee\007\uffee\010" +
    "\uffee\012\uffee\001\002\000\020\002\ufff3\004\ufff3\010\ufff3" +
    "\012\ufff3\022\ufff3\023\ufff3\027\ufff3\001\002\000\012\004" +
    "\ufff2\007\ufff2\010\ufff2\012\ufff2\001\002\000\012\002\ufff8" +
    "\022\ufff8\023\ufff8\027\ufff8\001\002\000\004\002\001\001" +
    "\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\065\000\014\004\011\007\005\013\010\014\003\017" +
    "\004\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\013\010\014\012\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\002\017\011\020\001\001\000\004\011\065\001\001" +
    "\000\002\001\001\000\002\001\001\000\012\003\024\006" +
    "\027\012\030\015\023\001\001\000\002\001\001\000\004" +
    "\012\064\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\003\024\012\030\015\057\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\005\033\010\035\016\034\001" +
    "\001\000\004\016\056\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\005\033\010\040\016\034\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\005\033\010\042" +
    "\016\034\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$ScriptParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$ScriptParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$ScriptParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

    // Switch On/Off Debug Mode
    action_obj.debug(mDebugFlag);

    }


    // The System Logger
    private final static LOGDefaultLogger mLogger 
      = LOGDefaultLogger.getInstance();
    // The Debugging Flag
    private boolean mDebugFlag = false;
    // Handle An Error 
    @Override
    public final void syntax_error(final Symbol symbol) {
      final Object object = symbol.value;
      if(object instanceof SyntaxDocToken) {
        SyntaxDocToken token = (SyntaxDocToken)object;
        mLogger.failure("Error: Syntax Error With Token '" + token + "'");
      } 
      // Propagate Error
      super.done_parsing();
    }
    // Handle An Error  
    @Override
    public final void unrecovered_syntax_error(final Symbol symbol) throws Exception {
      final Object object = symbol.value;
      if(object instanceof SyntaxDocToken) {
        final SyntaxDocToken token = (SyntaxDocToken)object;
        mLogger.failure("Error: Unrecovered Syntax Error '" + token + "'");
      } 
      // Propagate Error
      super.done_parsing();
    }
    // Construct The Token Parser
    public ScriptParser(final ScriptLexxer lexer, final boolean debug) {
        // Create The Parser
        super(lexer);
        // Init Debug Flag
        mDebugFlag = debug;
    }
    // Parse A Scene Script From  String
    public final static SceneScript run(
        final String start, 
        final String input,
        final boolean debug, 
        final boolean comment, 
        final boolean newline,
        final boolean whitespace) {
        try {
            // Create A String Reader
            final StringReader reader = new StringReader(input);
            // Create A Script Lexxer
            final ScriptLexxer lexxer = new ScriptLexxer(
                reader, comment, newline, whitespace);
            // Create A Script PArser
            final ScriptParser parser = new ScriptParser(lexxer, debug);
            //mLogger.failure("Parsing Content:\n" + input);  
            final Symbol symbol = parser.parse();
            // Cast The Symbol Down
            if(symbol != null) {
                if(symbol.value instanceof SceneScript) {
                    //mLogger.failure("Parsing Result:\n" + symbol.value);  
                    return (SceneScript)symbol.value;
                } else {
                    //mLogger.failure("Error: Cannot Parse Scene Script");
                    return null;
                }
            } else {
                //mLogger.failure("Error: Cannot Parse Scene Script");
                return null;
            }
        } catch(Exception exc) {
            //mLogger.failure("Error: Parsing Scene Script " + exc.toString() + "");
            return null;
        }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$ScriptParser$actions {


    // The Singelton Logger
    private final LOGDefaultLogger mLogger = 
      LOGDefaultLogger.getInstance();
    // The Debugging Flag
    private boolean mDebugFlag = false;
    // Set Debugging Flag
    public final void debug(final boolean flag) {
        mDebugFlag = flag;
    }
    // Create a Java Class From A String
    private final Class clazz(final String name) {
        Class clazz = null;
        try {
            // Try To Create The Class Object
            clazz = Class.forName(name);
        } catch (Exception e) {
            mLogger.failure(e.toString());
        } finally {
            // Finally Return The Class Object
            return clazz;
        }
    }
    // Print A Debug Message
    private final void debug(final String message) {
        if(mDebugFlag) {
            mLogger.message(message);
        }
    }

  private final ScriptParser parser;

  /** Constructor */
  CUP$ScriptParser$actions(ScriptParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$ScriptParser$do_action(
    int                        CUP$ScriptParser$act_num,
    java_cup.runtime.lr_parser CUP$ScriptParser$parser,
    java.util.Stack            CUP$ScriptParser$stack,
    int                        CUP$ScriptParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$ScriptParser$result;

      /* select the action based on the action number */
      switch (CUP$ScriptParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // feature ::= IDENTIFIER ASSIGNMENT IDENTIFIER 
            {
              ActionFeature RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken key = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken val = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionFeature(
            ActionFeature.Type.IDENTIFIER,
            key.getLower(), val.getUpper(), 
            key.getValue(), val.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // feature ::= IDENTIFIER ASSIGNMENT STRING 
            {
              ActionFeature RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken key = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken val = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionFeature(
            ActionFeature.Type.STRING,
            key.getLower(), val.getUpper(), 
            key.getValue(), val.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // feature ::= IDENTIFIER ASSIGNMENT FLOATING 
            {
              ActionFeature RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken key = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken val = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionFeature(
            ActionFeature.Type.FLOATING,
            key.getLower(), val.getUpper(), 
            key.getValue(), val.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // feature ::= IDENTIFIER ASSIGNMENT INTEGER 
            {
              ActionFeature RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken key = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken val = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
         RESULT = new ActionFeature(
            ActionFeature.Type.INTEGER,
            key.getLower(), val.getUpper(), 
            key.getValue(), val.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // feature ::= IDENTIFIER ASSIGNMENT BOOLEAN 
            {
              ActionFeature RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken key = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken val = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionFeature(
            ActionFeature.Type.BOOLEAN,
            key.getLower(), val.getUpper(), 
            key.getValue(), val.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // feature ::= IDENTIFIER ASSIGNMENT PLACEHOLDER VARIABLE 
            {
              ActionFeature RESULT =null;
		int keyleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).left;
		int keyright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).right;
		SyntaxDocToken key = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).value;
		int valleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int valright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken val = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionParam(
            key.getLower(), val.getUpper(), 
            key.getValue(), val.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature",12, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // feature_sequence ::= feature 
            {
              LinkedList RESULT =null;
		int featureleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int featureright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ActionFeature feature = (ActionFeature)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new LinkedList<ActionFeature>();
        RESULT.add(feature);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_sequence",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // feature_sequence ::= feature_sequence feature 
            {
              LinkedList RESULT =null;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int featureleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int featureright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		ActionFeature feature = (ActionFeature)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = sequence;
        RESULT.add(feature);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_sequence",3, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // feature_sequence_opt ::= 
            {
              LinkedList RESULT =null;
		
        RESULT = new LinkedList<ActionFeature>();
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_sequence_opt",6, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // feature_sequence_opt ::= feature_sequence 
            {
              LinkedList RESULT =null;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = sequence;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("feature_sequence_opt",6, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // word ::= ACTIONHEAD IDENTIFIER IDENTIFIER IDENTIFIER feature_sequence_opt ACTIONFOOT 
            {
              UtteranceElement RESULT =null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)).right;
		SyntaxDocToken header = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)).value;
		int characterleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)).right;
		SyntaxDocToken character = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)).value;
		int modalityleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).left;
		int modalityright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).right;
		SyntaxDocToken modality = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).value;
		int activityleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int activityright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken activity = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int footerleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int footerright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken footer = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionObject(
                header.getLower(), 
                footer.getUpper(),
                character.getValue(),
                modality.getValue(), 
                activity.getValue(), 
                sequence);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("word",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // word ::= ACTIONHEAD IDENTIFIER IDENTIFIER feature_sequence_opt ACTIONFOOT 
            {
              UtteranceElement RESULT =null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)).right;
		SyntaxDocToken header = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)).value;
		int characterleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).left;
		int characterright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).right;
		SyntaxDocToken character = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).value;
		int activityleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int activityright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken activity = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int footerleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int footerright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken footer = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionObject(
                header.getLower(), 
                footer.getUpper(),
                character.getValue(),
                null, // No modality
                activity.getValue(), // name
                sequence);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("word",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // word ::= ACTIONHEAD IDENTIFIER feature_sequence_opt ACTIONFOOT 
            {
              UtteranceElement RESULT =null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).right;
		SyntaxDocToken header = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).value;
		int activityleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int activityright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken activity = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int footerleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int footerright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken footer = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new ActionObject(
                header.getLower(), 
                footer.getUpper(),
                null, // No actor
                null, // No modality
                activity.getValue(), // name
                sequence);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("word",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // word ::= PLACEHOLDER VARIABLE 
            {
              UtteranceElement RESULT =null;
		int placeholderleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int placeholderright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		SyntaxDocToken placeholder = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken identifier = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new SceneParam(
            placeholder.getLower(), 
            identifier.getUpper(), 
            identifier.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("word",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // word ::= SIMPLEWORD ABBREVIATION SIMPLEWORD 
            {
              UtteranceElement RESULT =null;
		int leftleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int leftright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken left = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int rightleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int rightright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken right = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new SceneAbbrev(
            left.getLower(), 
            right.getUpper(), 
            left.getValue(), 
            right.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("word",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // word ::= SIMPLEWORD 
            {
              UtteranceElement RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken identifier = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new SceneWord(
            identifier.getLower(), 
            identifier.getUpper(), 
            identifier.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("word",8, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // word_sequence ::= word 
            {
              LinkedList RESULT =null;
		int wordleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		UtteranceElement word = (UtteranceElement)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new LinkedList<UtteranceElement>();
        RESULT.add(word);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("word_sequence",1, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // word_sequence ::= word_sequence word 
            {
              LinkedList RESULT =null;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int wordleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int wordright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		UtteranceElement word = (UtteranceElement)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = sequence;
        RESULT.add(word);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("word_sequence",1, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // utterance ::= word_sequence PUNCTUATION 
            {
              SceneUttr RESULT =null;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int punctuationleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int punctuationright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken punctuation = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        // Get The First Word In List
        UtteranceElement firstword = (UtteranceElement)sequence.getFirst();
        // Construct A New Utterance
        RESULT = new SceneUttr(
            firstword.getLower(), 
            punctuation.getUpper(), 
            sequence,
            punctuation.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance",11, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // utterance_sequence ::= utterance 
            {
              LinkedList RESULT =null;
		int utteranceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int utteranceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneUttr utterance = (SceneUttr)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new LinkedList<SceneUttr>();
        RESULT.add(utterance);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_sequence",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // utterance_sequence ::= utterance_sequence utterance 
            {
              LinkedList RESULT =null;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int utteranceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int utteranceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneUttr utterance = (SceneUttr)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = sequence;
        RESULT.add(utterance);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("utterance_sequence",4, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // turn ::= IDENTIFIER COLONMARK utterance_sequence 
            {
              SceneTurn RESULT =null;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken identifier = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int colonmarkleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int colonmarkright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		SyntaxDocToken colonmark = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        // Get The Last Turn Object
        final SceneUttr lastuttr = (SceneUttr)sequence.getLast();
        // Construct The Turn Object
        RESULT = new SceneTurn(
            identifier.getLower(), 
            lastuttr.getUpper(), 
            identifier.getValue(), 
            sequence);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("turn",7, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // turn_sequence ::= turn 
            {
              LinkedList RESULT =null;
		int turnleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int turnright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneTurn turn = (SceneTurn)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new LinkedList<SceneTurn>();
        RESULT.add(turn);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("turn_sequence",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // turn_sequence ::= turn_sequence turn 
            {
              LinkedList RESULT =null;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int turnleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int turnright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneTurn turn = (SceneTurn)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = sequence;
        RESULT.add(turn);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("turn_sequence",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // scene ::= SCENEHEADER UNDERLINE LANGUAGE IDENTIFIER COLONMARK turn_sequence 
            {
              SceneObject RESULT =null;
		int headerleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)).left;
		int headerright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)).right;
		SyntaxDocToken header = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)).value;
		int underlineleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)).left;
		int underlineright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)).right;
		SyntaxDocToken underline = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-4)).value;
		int languageleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).left;
		int languageright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).right;
		SyntaxDocToken language = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-3)).value;
		int identifierleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).left;
		int identifierright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).right;
		SyntaxDocToken identifier = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-2)).value;
		int colonmarkleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int colonmarkright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		SyntaxDocToken colonmark = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        // Get The Last Turn Object
        final SceneTurn lastturn = (SceneTurn)sequence.getLast();
        // Construct Scene Object
        RESULT = new SceneObject(
            header.getLower(), 
            lastturn.getUpper(), 
            language.getValue(), 
            identifier.getValue(), 
            sequence);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("scene",9, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-5)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // entity ::= COMMENT 
            {
              SceneEntity RESULT =null;
		int commentleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int commentright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SyntaxDocToken comment = (SyntaxDocToken)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
          RESULT = new SceneComment( 
                comment.getLower(), 
                comment.getUpper(), 
                comment.getValue());
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("entity",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // entity ::= scene 
            {
              SceneEntity RESULT =null;
		int sceneleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int sceneright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneObject scene = (SceneObject)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
          RESULT = scene;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("entity",10, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // entity_sequence ::= entity 
            {
              LinkedList RESULT =null;
		int entityleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int entityright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneEntity entity = (SceneEntity)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new LinkedList<SceneEntity>();
        RESULT.add(entity);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("entity_sequence",2, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // entity_sequence ::= entity_sequence entity 
            {
              LinkedList RESULT =null;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		int entityleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int entityright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		SceneEntity entity = (SceneEntity)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = sequence;
        RESULT.add(entity);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("entity_sequence",2, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // entity_sequence_opt ::= entity_sequence 
            {
              LinkedList RESULT =null;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = sequence;
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("entity_sequence_opt",5, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // entity_sequence_opt ::= 
            {
              LinkedList RESULT =null;
		
        RESULT = new LinkedList<SceneEntity>();
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("entity_sequence_opt",5, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // scenescript ::= entity_sequence_opt 
            {
              SceneScript RESULT =null;
		int sequenceleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).left;
		int sequenceright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()).right;
		LinkedList sequence = (LinkedList)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.peek()).value;
		
        RESULT = new SceneScript(0, 0, sequence);
    
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("scenescript",13, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          return CUP$ScriptParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= scenescript EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).right;
		SceneScript start_val = (SceneScript)((java_cup.runtime.Symbol) CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)).value;
		RESULT = start_val;
              CUP$ScriptParser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.elementAt(CUP$ScriptParser$top-1)), ((java_cup.runtime.Symbol)CUP$ScriptParser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$ScriptParser$parser.done_parsing();
          return CUP$ScriptParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

